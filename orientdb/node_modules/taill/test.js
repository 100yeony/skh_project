const test = require('ava').default;
const fs = require('fs');

const logger = require('./index');
const utils = require('./utils');

const tempPath = utils.getAbsolutePath('./temp');
const logfilePath = utils.getAbsolutePath('./temp/logfile.txt');
const altLogfilePath = utils.getAbsolutePath('./temp/alt-logfile.txt');

/** Before running tests, create temp dir with the logfiles */
test.before(() => {
  fs.mkdirSync(tempPath);
  fs.writeFileSync(logfilePath, '');
  fs.writeFileSync(altLogfilePath, '');
});

/** Once tests are finished, remove all logfiles and delete temp dir */
test.after(() => {
  fs.unlinkSync(logfilePath);
  fs.unlinkSync(altLogfilePath);
  fs.rmdirSync(tempPath);
});

test('it should watch the logfile', (t) => {
  logger.watchFile(logfilePath);

  t.deepEqual(logger.filesToWatch, [logfilePath]);
});

test('it should watch another logfile', (t) => {
  logger.watchFile(altLogfilePath);

  t.deepEqual(logger.filesToWatch, [logfilePath, altLogfilePath]);
});

test.cb('it should add a new line on the logfile and trigger a \'line\' event with the correct data', (t) => {
  t.plan(1);

  logger.on('line', (data) => {
    (data === 'hello world') ? t.pass() : t.fail();
    t.end();
  });

  fs.appendFileSync(logfilePath, 'hello world');
});

test.cb('it should add 3 new lines on the logfile and trigger 3 times the \'line\' event with the correct data', (t) => {
  t.plan(1);

  let timesExecuted = 0;
  let correct = 0;

  logger.synchronizeFilesLines();

  logger.on('line', (data) => {
    timesExecuted += 1;

    if (data === 'test new line') {
      correct += 1;
    }

    if (timesExecuted === 3) {
      (correct === 3) ? t.pass() : t.fail();
      t.end();
    }
  });

  [0, 1, 2].forEach(() => fs.appendFileSync(logfilePath, '\ntest new line'));
});

test.cb('it should add a new line on the alt-logfile and trigger the \'line\' event with the correct filename', (t) => {
  t.plan(1);

  logger.synchronizeFilesLines();

  logger.on('line', (data, filename) => {
    (filename === 'alt-logfile.txt') ? t.pass() : t.fail();
    t.end();
  });

  fs.appendFileSync(altLogfilePath, '\nhello world');
});

test('it should return an array of all listeners on the \'line\' event', (t) => {
  logger.removeEventListeners('line');
  logger.on('line', (data, filename) => {});

  const listeners = logger.getEventListeners('line');

  t.is(listeners.length, 1);
});

test('it should remove all listeners from the \'line\' event', (t) => {
  logger.removeEventListeners('line');

  const listeners = logger.getEventListeners('line');

  t.is(listeners.length, 0);
});

test('it should error when trying to add an non-existing logfile path', (t) => {
  const error = logger.watchFile('./temp/unknown-file.txt');

  (error instanceof Error) ? t.pass() : t.fail();
});

test('it should error when trying to add a filepath already registered', (t) => {
  const error = logger.watchFile('./temp/logfile.txt');

  (error instanceof Error) ? t.pass() : t.fail();
});

test('it should unwatch a file registered', (t) => {
  const filename = logger.unwatchFile('./temp/logfile.txt');

  t.is(filename, 'logfile.txt');
});

test('it should error when trying to unwatch a file that it not registered', (t) => {
  const error = logger.unwatchFile('./temp/logfile.txt');

  (error instanceof Error) ? t.pass() : t.fail();
});
